// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api_test

import (
	"context"
	"net"
	"sync"
	"theskyinflames/core-tech/listener/internal/infra/api"
)

// Ensure, that WSConversationHandlerMock does implement api.WSConversationHandler.
// If this is not the case, regenerate this file with moq.
var _ api.WSConversationHandler = &WSConversationHandlerMock{}

// WSConversationHandlerMock is a mock implementation of api.WSConversationHandler.
//
//	func TestSomethingThatUsesWSConversationHandler(t *testing.T) {
//
//		// make and configure a mocked api.WSConversationHandler
//		mockedWSConversationHandler := &WSConversationHandlerMock{
//			HandleFunc: func(ctx context.Context, conn net.Conn) error {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedWSConversationHandler in code that requires api.WSConversationHandler
//		// and then make assertions.
//
//	}
type WSConversationHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, conn net.Conn) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conn is the conn argument value.
			Conn net.Conn
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *WSConversationHandlerMock) Handle(ctx context.Context, conn net.Conn) error {
	callInfo := struct {
		Ctx  context.Context
		Conn net.Conn
	}{
		Ctx:  ctx,
		Conn: conn,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	if mock.HandleFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleFunc(ctx, conn)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedWSConversationHandler.HandleCalls())
func (mock *WSConversationHandlerMock) HandleCalls() []struct {
	Ctx  context.Context
	Conn net.Conn
} {
	var calls []struct {
		Ctx  context.Context
		Conn net.Conn
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
