// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api_test

import (
	"net/http"
	"sync"
	"theskyinflames/core-tech/listener/internal/infra/api"
)

// Ensure, that AuthenticatorMock does implement api.Authenticator.
// If this is not the case, regenerate this file with moq.
var _ api.Authenticator = &AuthenticatorMock{}

// AuthenticatorMock is a mock implementation of api.Authenticator.
//
//	func TestSomethingThatUsesAuthenticator(t *testing.T) {
//
//		// make and configure a mocked api.Authenticator
//		mockedAuthenticator := &AuthenticatorMock{
//			AuthFunc: func(r *http.Request) error {
//				panic("mock out the Auth method")
//			},
//		}
//
//		// use mockedAuthenticator in code that requires api.Authenticator
//		// and then make assertions.
//
//	}
type AuthenticatorMock struct {
	// AuthFunc mocks the Auth method.
	AuthFunc func(r *http.Request) error

	// calls tracks calls to the methods.
	calls struct {
		// Auth holds details about calls to the Auth method.
		Auth []struct {
			// R is the r argument value.
			R *http.Request
		}
	}
	lockAuth sync.RWMutex
}

// Auth calls AuthFunc.
func (mock *AuthenticatorMock) Auth(r *http.Request) error {
	callInfo := struct {
		R *http.Request
	}{
		R: r,
	}
	mock.lockAuth.Lock()
	mock.calls.Auth = append(mock.calls.Auth, callInfo)
	mock.lockAuth.Unlock()
	if mock.AuthFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AuthFunc(r)
}

// AuthCalls gets all the calls that were made to Auth.
// Check the length with:
//
//	len(mockedAuthenticator.AuthCalls())
func (mock *AuthenticatorMock) AuthCalls() []struct {
	R *http.Request
} {
	var calls []struct {
		R *http.Request
	}
	mock.lockAuth.RLock()
	calls = mock.calls.Auth
	mock.lockAuth.RUnlock()
	return calls
}
